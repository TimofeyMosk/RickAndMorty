{"ast":null,"code":"import { mainAPI } from '../api/api';\nconst SET_DATA = 'SET_DATA';\nconst SET_INFO = 'SET_INFO';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_CHARACTER = 'SET_CHARACTER';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst initialState = {\n  data: [],\n  info: {},\n  currentPage: 1,\n  character: {},\n  episodes: {},\n  isFetching: false\n};\nexport const mainReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DATA:\n      return { ...state,\n        data: action.data\n      };\n\n    case SET_INFO:\n      return { ...state,\n        info: action.info\n      };\n\n    case SET_CHARACTER:\n      return { ...state,\n        character: action.character\n      };\n\n    case SET_EPISODES:\n      return { ...state,\n        episodes: action.character\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setData = data => ({\n  type: SET_DATA,\n  data\n});\n\nconst setInfo = info => ({\n  type: SET_INFO,\n  info\n});\n\nconst setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\n\nconst toogleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\n\nconst setCharacter = character => ({\n  type: SET_CHARACTER,\n  character\n});\n\nconst setEpisodes = character => ({\n  type: SET_EPISODES,\n  character\n});\n\nexport const requestData = page => async dispatch => {\n  dispatch(toogleIsFetching(true));\n  const response = await mainAPI.getData(page);\n\n  if (response.status === 200) {\n    dispatch(setData(response.data.results));\n    dispatch(setInfo(response.data.info));\n    dispatch(toogleIsFetching(false));\n  } else {\n    console.log(response);\n    dispatch(toogleIsFetching(false));\n  }\n};\nexport const requestCharacter = id => async dispatch => {\n  dispatch(toogleIsFetching(true));\n  const response = await mainAPI.getCharacter(id);\n\n  if (response.status === 200) {\n    dispatch(setCharacter(response.data));\n    dispatch(toogleIsFetching(false));\n  } else {\n    console.log(response);\n    dispatch(toogleIsFetching(false));\n  }\n};\nexport const requestEpisodes = id => async dispatch => {\n  dispatch(toogleIsFetching(true));\n  const response = await mainAPI.getEp(id);\n\n  if (response.status === 200) {\n    dispatch(setEpisodes(response.data));\n    dispatch(toogleIsFetching(false));\n  } else {\n    console.log(response);\n    dispatch(toogleIsFetching(false));\n  }\n};\nexport const changePage = page => async dispatch => dispatch(setCurrentPage(page));","map":{"version":3,"names":["mainAPI","SET_DATA","SET_INFO","SET_CURRENT_PAGE","SET_CHARACTER","TOGGLE_IS_FETCHING","initialState","data","info","currentPage","character","episodes","isFetching","mainReducer","state","action","type","SET_EPISODES","setData","setInfo","setCurrentPage","toogleIsFetching","setCharacter","setEpisodes","requestData","page","dispatch","response","getData","status","results","console","log","requestCharacter","id","getCharacter","requestEpisodes","getEp","changePage"],"sources":["/Users/timofeymoskalev/Programming/frontend/RickAndMorty/src/redux/main-reducer.js"],"sourcesContent":["import { mainAPI } from '../api/api';\n\nconst SET_DATA = 'SET_DATA'\nconst SET_INFO = 'SET_INFO'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_CHARACTER = 'SET_CHARACTER'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\n\nconst initialState = {\n    data: [],\n    info: {},\n    currentPage: 1,\n    character: {},\n    episodes: {},\n    isFetching: false\n}\n\nexport const mainReducer = (state = initialState, action) => {\n    switch (action.type){\n        case SET_DATA: \n            return {...state, data: action.data}\n        case SET_INFO: \n            return {...state, info: action.info}\n        case SET_CHARACTER:\n            return {...state,character: action.character}\n        case SET_EPISODES:\n            return {...state,episodes: action.character}\n        case TOGGLE_IS_FETCHING:\n            return{...state,isFetching: action.isFetching}\n        case SET_CURRENT_PAGE: \n            return {...state, currentPage: action.currentPage}\n        \n        default: \n            return state\n    }\n}\n\nconst setData = (data) => ({type: SET_DATA, data})\nconst setInfo = (info) => ({type: SET_INFO, info})\nconst setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\nconst toogleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\nconst setCharacter = (character) => ({type: SET_CHARACTER, character})\nconst setEpisodes = (character) => ({type: SET_EPISODES, character})\n\n\nexport const requestData = (page) => async (dispatch) => {\n    dispatch(toogleIsFetching(true))\n    const response = await mainAPI.getData(page)\n    if(response.status === 200){\n        dispatch(setData(response.data.results))\n        dispatch(setInfo(response.data.info))\n        dispatch(toogleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toogleIsFetching(false))\n    }\n}\nexport const requestCharacter = (id) => async (dispatch) => {\n    dispatch(toogleIsFetching(true))\n    const response = await mainAPI.getCharacter(id)\n    if(response.status === 200){\n        dispatch(setCharacter(response.data))\n        dispatch(toogleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toogleIsFetching(false))\n    }\n} \nexport const requestEpisodes = (id) => async (dispatch) => {\n    dispatch(toogleIsFetching(true))\n    const response = await mainAPI.getEp(id)\n    if(response.status === 200){\n        dispatch(setEpisodes(response.data))\n        dispatch(toogleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toogleIsFetching(false))\n    }\n} \nexport const changePage = (page) => async (dispatch) => dispatch(setCurrentPage(page))"],"mappings":"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"},"metadata":{},"sourceType":"module"}