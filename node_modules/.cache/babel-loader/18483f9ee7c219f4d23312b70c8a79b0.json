{"ast":null,"code":"import { mainAPI } from '../api/api';\nconst SET_DATA = 'SET_DATA';\nconst SET_INFO = 'SET_INFO';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_CHARACTER = 'SET_CHARACTER';\nconst initialState = {\n  data: [],\n  info: {},\n  currentPage: 1,\n  character: {}\n};\nexport const mainReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DATA:\n      return { ...state,\n        data: action.data\n      };\n\n    case SET_INFO:\n      return { ...state,\n        info: action.info\n      };\n\n    case SET_CHARACTER:\n      return { ...state,\n        info: action.character\n      };\n\n    case TOGGLE_IS_FETCHING:\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setData = data => ({\n  type: SET_DATA,\n  data\n});\n\nconst setInfo = info => ({\n  type: SET_INFO,\n  info\n});\n\nconst setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\n\nconst setCharacter = character => ({\n  type: SET_CHARACTER,\n  character\n});\n\nexport const requestData = page => async dispatch => {\n  const response = await mainAPI.getData(page);\n\n  if (response.status === 200) {\n    dispatch(setData(response.data.results));\n    dispatch(setInfo(response.data.info));\n  } else {\n    console.log(response);\n  }\n};\nexport const requestCharacter = id => async dispatch => {\n  const response = await mainAPI.getData(id);\n\n  if (response.status === 200) {\n    dispatch(setCharacter(response.data));\n  } else {\n    console.log(response);\n  }\n};\nexport const changePage = page => async dispatch => dispatch(setCurrentPage(page));","map":{"version":3,"names":["mainAPI","SET_DATA","SET_INFO","SET_CURRENT_PAGE","SET_CHARACTER","initialState","data","info","currentPage","character","mainReducer","state","action","type","TOGGLE_IS_FETCHING","setData","setInfo","setCurrentPage","setCharacter","requestData","page","dispatch","response","getData","status","results","console","log","requestCharacter","id","changePage"],"sources":["/Users/timofeymoskalev/Programming/frontend/RickAndMorty/src/redux/main-reducer.js"],"sourcesContent":["import { mainAPI } from '../api/api';\n\nconst SET_DATA = 'SET_DATA'\nconst SET_INFO = 'SET_INFO'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_CHARACTER = 'SET_CHARACTER'\n\nconst initialState = {\n    data: [],\n    info: {},\n    currentPage: 1,\n    character: {}\n}\n\nexport const mainReducer = (state = initialState, action) => {\n    switch (action.type){\n        case SET_DATA: \n            return {...state, data: action.data}\n        case SET_INFO: \n            return {...state, info: action.info}\n        case SET_CHARACTER:\n            return {...state,info: action.character}\n        case TOGGLE_IS_FETCHING:\n            \n        case SET_CURRENT_PAGE: \n            return {...state, currentPage: action.currentPage}\n        default: \n            return state\n    }\n}\n\nconst setData = (data) => ({type: SET_DATA, data})\nconst setInfo = (info) => ({type: SET_INFO, info})\nconst setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\nconst setCharacter = (character) => ({type: SET_CHARACTER, character})\n\n\nexport const requestData = (page) => async (dispatch) => {\n    const response = await mainAPI.getData(page)\n    if(response.status === 200){\n        dispatch(setData(response.data.results))\n        dispatch(setInfo(response.data.info))\n    }else{\n        console.log(response);\n    }\n}\nexport const requestCharacter = (id) => async (dispatch) => {\n    const response = await mainAPI.getData(id)\n    if(response.status === 200){\n        dispatch(setCharacter(response.data))\n    }else{\n        console.log(response);\n    }\n} \nexport const changePage = (page) => async (dispatch) => dispatch(setCurrentPage(page))"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,EADW;EAEjBC,IAAI,EAAE,EAFW;EAGjBC,WAAW,EAAE,CAHI;EAIjBC,SAAS,EAAE;AAJM,CAArB;AAOA,OAAO,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBN,YAAyB;EAAA,IAAXO,MAAW;;EACzD,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKZ,QAAL;MACI,OAAO,EAAC,GAAGU,KAAJ;QAAWL,IAAI,EAAEM,MAAM,CAACN;MAAxB,CAAP;;IACJ,KAAKJ,QAAL;MACI,OAAO,EAAC,GAAGS,KAAJ;QAAWJ,IAAI,EAAEK,MAAM,CAACL;MAAxB,CAAP;;IACJ,KAAKH,aAAL;MACI,OAAO,EAAC,GAAGO,KAAJ;QAAUJ,IAAI,EAAEK,MAAM,CAACH;MAAvB,CAAP;;IACJ,KAAKK,kBAAL;IAEA,KAAKX,gBAAL;MACI,OAAO,EAAC,GAAGQ,KAAJ;QAAWH,WAAW,EAAEI,MAAM,CAACJ;MAA/B,CAAP;;IACJ;MACI,OAAOG,KAAP;EAZR;AAcH,CAfM;;AAiBP,MAAMI,OAAO,GAAIT,IAAD,KAAW;EAACO,IAAI,EAAEZ,QAAP;EAAiBK;AAAjB,CAAX,CAAhB;;AACA,MAAMU,OAAO,GAAIT,IAAD,KAAW;EAACM,IAAI,EAAEX,QAAP;EAAiBK;AAAjB,CAAX,CAAhB;;AACA,MAAMU,cAAc,GAAIT,WAAD,KAAkB;EAACK,IAAI,EAAEV,gBAAP;EAAyBK;AAAzB,CAAlB,CAAvB;;AACA,MAAMU,YAAY,GAAIT,SAAD,KAAgB;EAACI,IAAI,EAAET,aAAP;EAAsBK;AAAtB,CAAhB,CAArB;;AAGA,OAAO,MAAMU,WAAW,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;EACrD,MAAMC,QAAQ,GAAG,MAAMtB,OAAO,CAACuB,OAAR,CAAgBH,IAAhB,CAAvB;;EACA,IAAGE,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;IACvBH,QAAQ,CAACN,OAAO,CAACO,QAAQ,CAAChB,IAAT,CAAcmB,OAAf,CAAR,CAAR;IACAJ,QAAQ,CAACL,OAAO,CAACM,QAAQ,CAAChB,IAAT,CAAcC,IAAf,CAAR,CAAR;EACH,CAHD,MAGK;IACDmB,OAAO,CAACC,GAAR,CAAYL,QAAZ;EACH;AACJ,CARM;AASP,OAAO,MAAMM,gBAAgB,GAAIC,EAAD,IAAQ,MAAOR,QAAP,IAAoB;EACxD,MAAMC,QAAQ,GAAG,MAAMtB,OAAO,CAACuB,OAAR,CAAgBM,EAAhB,CAAvB;;EACA,IAAGP,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;IACvBH,QAAQ,CAACH,YAAY,CAACI,QAAQ,CAAChB,IAAV,CAAb,CAAR;EACH,CAFD,MAEK;IACDoB,OAAO,CAACC,GAAR,CAAYL,QAAZ;EACH;AACJ,CAPM;AAQP,OAAO,MAAMQ,UAAU,GAAIV,IAAD,IAAU,MAAOC,QAAP,IAAoBA,QAAQ,CAACJ,cAAc,CAACG,IAAD,CAAf,CAAzD"},"metadata":{},"sourceType":"module"}